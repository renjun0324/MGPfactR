
task <- dyncli::main()

library(dplyr, warn.conflicts = FALSE)
library(tidyr, warn.conflicts = FALSE)
library(purrr, warn.conflicts = FALSE)

julia_home = "/public/home/renjun/tool/julia-1.6.6/bin"
# celltrek_root <- "/share/data6/tmp/renjun/CellTrekResult/CellTrek/celltrek_code_all"
# source(paste0(celltrek_root, "/prepare.R"))

#-----------------------------------------------------------------------------
#
#                           satisfy r cmd check
#
#-----------------------------------------------------------------------------

# library(dynwrap)
# library(dyneval)
# library(dynmethods)
# library(dynplot)
# library(dyncli)
# library(dynparam)
# library(tidyverse)
# 
# data_path = "/share/data6/tmp/renjun/CellTrekResult/CellTrek/benchmark_datasets/synthetic/dyntoy/bifurcating/bifurcating_1.rds"
# dataset = readRDS(data_path)
# # dataset = add_cell_waypoints(dataset)
# dataset_wrap = wrap_expression(expression = dataset$expression,
#                                counts = dataset$counts,
#                                prior_information = dataset$prior_information)
# expression = dataset_wrap$expression
# priors = dataset_wrap$prior_information
# start_id = priors$start_id
# parameters <- list(omega = 0.7,
#                    max_murp = 400,
#                    iterations = 4000,
#                    chains_number = 1)

expression <- task$expression
parameters <- task$parameters
start_id <- task$priors$start_id

#-----------------------------------------------------------------------------
#
#                                  create
#
#-----------------------------------------------------------------------------

checkpoints <- list(method_afterpreproc = as.numeric(Sys.time()))

# construct celltrek object
cell_info = data.frame(row.names = rownames(expression),
                       cell_id = rownames(expression))
ct <- CreateCellTrekObject(data_matrix = as.matrix(expression), 
                           MetaData = cell_info)

#-----------------------------------------------------------------------------
#
#                                   MURP
#
#-----------------------------------------------------------------------------

ct@MURP <- MURP(Data = ct@assay$data_matrix,
                omega = parameters$omega, 
                max_murp = parameters$max_murp,
                cores = 1, iter = 10,  seed = 723, fast = TRUE)
ct@MetaData$murp_cluster <- ct@MURP$Recommended_K_cl$cluster
ct@MURP$centersPCA <- prcomp(ct@MURP$Recommended_K_cl$centers, center = FALSE, scale. = FALSE)

#-----------------------------------------------------------------------------
#
#                                pseudotime
#
#-----------------------------------------------------------------------------

start_id <- if (!is.null(start_id)) {
    sample(priors$start_id, 1)
  } else {
    NULL
  }

if(is.null(start_id)){
  murp_start_id = 999
}else{
  ind = which(names(ct@MURP$Recommended_K_cl$cluster)==start_id)
  murp_start_id = as.vector(ct@MURP$Recommended_K_cl$cluster[ind])
}

SaveMURPDatToJulia(ct, Q = 3)
ct = SetSettings(ct, 
                 murp_pc_number = 3, 
                 trajectory_number = 3, 
                 pse_optim_iterations = parameters$iterations, 
                 start_murp = murp_start_id,
                 chains_number = parameters$chains_number)
RunningmodMGPpseudoT(ct, julia_home)

#-----------------------------------------------------------------------------
#
#                                 tbtree
#
#-----------------------------------------------------------------------------

## create tb-tree
ct = ImportPseSimToR(object = ct, init = TRUE)
ct@OptimResult$pse <- GetIterCor(mamba = ct@OptimResult$pse,
                                 murp = ct@MURP,
                                 metadata = ct@MetaData,
                                 iteration_list = list(c(1, getParams(ct,"pse_optim_iterations"))),
                                 adjust = FALSE)
ct@OptimResult$pse <- GetPredT(mamba = ct@OptimResult$pse,
                               murp = ct@MURP,
                               metadata = ct@MetaData,
                               iter_chain_cor_index = 1,
                               chains = 1,
                               adjust = FALSE,
                               filter_chain = FALSE,
                               mean_th = 0.3 )
param_meanvalue <- GetAllParamMeanChain(mamba = ct@OptimResult$pse, murp = ct@MURP, aspect = "pse",
                                        iter_range = rep(getParams(ct, "pse_optim_iterations"),2))

### get sdf & tree
sdf <- GetPseSdf(ct, 
                 param_meanvalue = param_meanvalue, 
                 t_pred_index = 1, 
                 unified_direction = FALSE, 
                 rm_adjust_chain = FALSE,
                 labels = getParams(ct,"label") )
orig_T <- GetPseudoTt(CellNum = nrow(ct@assay$data_matrix), 
                      pred_t = sdf$T, 
                      Cluster_Label = ct@MURP$Recommended_K_cl$cluster)

bintree_all <- GetBinTree(object = ct,sdf[order(sdf$T, decreasing = FALSE), ])
tbtree <- GetTbTree(object = ct, sdf[order(sdf$T, decreasing = FALSE), ])
tbtree_all <- GetTbTreeAllpoint(object = ct, tbtree, sdf, getParams(ct,"label"))
# save(ct, file = "ct.rda")

# TIMING: done with method
checkpoints$method_aftermethod <- as.numeric(Sys.time())

#-----------------------------------------------------------------------------
#
#                         process celltrek output
#
#-----------------------------------------------------------------------------

##  extract data
vertex = tbtree_all$vertex
dima =  tbtree_all$bb$xy %>% data.frame
rownames(dima) = rownames(vertex)

dimred = dima[(ct@MURP$Recommended_K+1):nrow(dima),] %>%
  magrittr::set_colnames(c("comp_1", "comp_2")) %>%
  as.matrix
dimred_milestones = dima[1:ct@MURP$Recommended_K,]   %>%
  magrittr::set_colnames(c("comp_1", "comp_2")) %>%
  as.matrix
milestone_network <-
  igraph::as_data_frame(tbtree$graph) %>%
  transmute(
    from,
    to,
    length = sqrt(rowSums((dimred_milestones[from, ] - dimred_milestones[to, ])^2)),
    # length = sdf[to,"T"]-sdf[from,"T"],
    directed = TRUE
  )
milestone_percentages = data.frame(cell_id = rownames(ct@MetaData),
                                   milestone_id = paste0("T[", ct@MetaData$murp_cluster, "]"),
                                   percentage = 1)

dimred_segment_progressions <-
  milestone_network %>%
  dplyr::select(from, to) %>%
  mutate(percentage = map(seq_len(n()), ~ c(0, 1))) %>%
  tidyr::unnest(percentage)

dsp_names <-
  dimred_segment_progressions %>%
  {ifelse(.$percentage == 0, .$from, .$to)}
dimred_segment_points <- dimred_milestones[dsp_names, , drop = FALSE]

## return output
if(parameters$trajectory_type=="tree"){
  output <-
    dynwrap::wrap_data(
      cell_ids = rownames(expression)
    ) %>%
    dynwrap::add_pseudotime(pseudotime = set_names(orig_T, rownames(expression))) %>%
    dynwrap::add_trajectory(
      milestone_ids = rownames(dimred_milestones),
      milestone_network = milestone_network,
      milestone_percentages = milestone_percentages
    ) %>%
    dynwrap::add_dimred(
      dimred = as.matrix(dimred),
      dimred_milestones = as.matrix(dimred_milestones),
      dimred_segment_progressions = dimred_segment_progressions,
      dimred_segment_points = dimred_segment_points
    ) %>%
    dynwrap::simplify_trajectory() %>%
    dynwrap::add_timings(
      timings = checkpoints
    )
}

if(parameters$trajectory_type=="linear"){
  output <-
    dynwrap::wrap_data( cell_ids = rownames(expression) ) %>%
    dynwrap::add_dimred( dimred = as.matrix(dimred) ) %>%
    dynwrap::add_linear_trajectory(pseudotime = set_names(orig_T, rownames(expression))) %>%
    dynwrap::add_timings( timings = checkpoints )
}

# output <-
#   dynwrap::wrap_data(
#     cell_ids = rownames(expression)
#   ) %>%
#   dynwrap::add_pseudotime(pseudotime = set_names(orig_T, rownames(expression))) %>%
#   dynwrap::add_trajectory(
#     milestone_network = milestone_network,
#     milestone_percentages = milestone_percentages
#   ) %>%
#   dynwrap::add_dimred(
#     dimred = as.matrix(dimred)
#   ) %>%
#   dynwrap::add_timings(checkpoints)


dyncli::write_output(output, task$output)

# output = add_cell_waypoints(output)
# metrics = dyneval::calculate_metrics(dataset, output,
#                                      metrics = c("featureimp_wcor", "him",
#                                                  "F1_branches", "correlation")) %>%
#   dplyr::select(c("time_waypointedgeodesic", "time_correlation", "time_him", "time_featureimp", "time_mapping_branches",
#            "correlation", "him",  "featureimp_cor", "featureimp_wcor",
#            "recovery_branches", "relevance_branches", "F1_branches")) %>%
#   mutate(geometry.mean = exp(mean(log( c(correlation, him, featureimp_wcor, F1_branches) ))) ) %>%
#   data.frame

